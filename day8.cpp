// COMMON START

#include <windows.h>

int get_length(char* string)
{
    int result = 0;
    while (string[result] != '\0') { result++; }
    return result;
}

int remainder(int dividend, int divisor)
{
    auto modulo = dividend % divisor;
    if (modulo < 0) { return modulo + divisor; }
    return modulo;
}

HANDLE stdout;

void initialize_printing() { stdout = GetStdHandle(STD_OUTPUT_HANDLE); }

void panic()
{
    char message[] = "panic\n";
    WriteConsole(stdout, message, sizeof(message) - 1, nullptr, nullptr);
    ExitProcess(1);
}

void print(char* message) { WriteConsole(stdout, message, get_length(message), nullptr, nullptr); }

void print(char* message, int length) { WriteConsole(stdout, message, length, nullptr, nullptr); }

void print(char c) { WriteConsole(stdout, &c, 1, nullptr, nullptr); }

void print(int value)
{
    char buffer[21];
    int count = 0;
    do
    {
        buffer[count] = remainder(value, 10) + '0';
        value /= 10;
        count++;
    }
    while (value != 0);
    for (int i = 0; i < count / 2; i++)
    {
        auto temp = buffer[i];
        buffer[i] = buffer[count - i - 1];
        buffer[count - i - 1] = temp;
    }
    WriteConsole(stdout, buffer, count, nullptr, nullptr);
}

bool is_digit(char c) { return c >= '0' && c <= '9'; }

bool starts_with(char* target, char* source)
{
    for (int i = 0; target[i] != '\0'; i++)
    {
        if (target[i] != source[i])
        {
            return false;
        }
    }
    return true;
}

bool starts_with(char* target, int length, char* source)
{
    for (int i = 0; target[i] == source[i]; i++)
    {
        if (i == length - 1)
        {
            return true;
        }
    }
    return false;
}

// COMMON END

#define MEMORY_CAPACITY 16384
char memory[MEMORY_CAPACITY];
int allocated = 0;

void* allocate(int size)
{
    if (allocated + size > MEMORY_CAPACITY) { panic(); }
    void* result = memory + allocated;
    allocated += size;
    return result;
}

char* SOURCE =
/*
"30373\n"
"25512\n"
"65332\n"
"33549\n"
"35390\n"
*/
"101000101302332302213011003243304222032110202245353522155334033122313210221230000001220130100022122\n"
"122210210320302310331324310141124041443541534154545244332222431041103123300231344112333231232020100\n"
"011020221031210311014411033201443431122251335521121521353321531213122340222303023121303012232120211\n"
"000012230303012110404302322434112535321314325133151343154523152113352323222121143131230230300010211\n"
"000101020102331320324033211434345545252433432135545542415124544553222514400213440042311303011013001\n"
"202001312100200021421012223142431211335331532444233515224153311522222555314232210423334003210102220\n"
"011131032221232202214203134355134325534535155321321531342523311414524444121034331120010122133121002\n"
"012103011013234340220133253444344345551421425245564632231421413155444352235322124240443423130033133\n"
"023022222331211330242121333322511343331564456422534434233336641233441411225132333403444004323031130\n"
"122001122320002403311244123154323212364525225546632523326222646644534552432225114212121041202201101\n"
"201302222421043202412532245351442246452432423633626243642533322462435241134121531144434002132010000\n"
"122213111044103234351235511134413234563453322444242566263522522644342234232253155254301234110300021\n"
"113313344244423401511525531451323665263352262243423362556353564226362361322533445233424434111012012\n"
"323302332240441412134135252445553645636653465334245666253662345645324254224333254123311012030133130\n"
"332120111102141423234341243443234252334456556562545633354222256464632536622143552122541234130423323\n"
"122224242212403144121523166423356623443663733433635436675735253523644354643342421314522214442040123\n"
"130344143331342212242115255554543656334463733356637544676553543434653253623265551525411402131040421\n"
"111003030342123123511252646254623535534357466353375646547564673536553255646533231452351410404020013\n"
"332124444335243313522222325635244436373363367347547657365464656355466356464545443334344153423341012\n"
"232342033111333231112656656265266357433564755537367665764637367764355253532366254114254324201100404\n"
"101233233343414344126532556226436647555645667376455456566557763767647635362565344622322534502310312\n"
"234111202233233215562262624436676643737337566473664453776457667475754435533226344322323423442342100\n"
"402232031433442312344526624557553755447353367466446577646665446357633777326623652432513252124004232\n"
"212231104214255124434243353647647447747775775475564685467674776466656644576645454532511251542330044\n"
"330321113544342342426252636573364357677754446645866464745647666457667355744545264522332325451130321\n"
"222411133521223236526546377433545377875565668665875675445864767573357464763354424234622534554143223\n"
"142220224123433353553534675777475684577445474444865557477778878786435663546733536644336533253210444\n"
"234303342221216325225647673565373587477777868464685648447578886544463547554576225446223235252550331\n"
"400113133345165253462253446365744855777875886776767567754874477477474565777333744664664551142214124\n"
"412132413313346333333555557454655547587847767896975957685547645564677763453677666366442342332232122\n"
"334033315545442636426445433765664666566478697675657685577868857488675767536433674224636523553151431\n"
"324335552413266326423347463568467745578777576776975669795799554567464666367654473542325262221441101\n"
"131511125256525526575766676354478786689579886969969766585778679485865565765376657344353536125153151\n"
"244524422253656346455634754665787648778667596778789965999786796565866745454753567443526323341424544\n"
"211132342564425664553757656668566547577957579778997556765667698865476847475563663373462554343345314\n"
"113141312266236453646536658484648878886895867677578576855575899996648686874734543472262346612411225\n"
"431125132236423453574474786578758875686695678776896989668789687975947747448445663477565546314151414\n"
"402551145566253546577566556767555768898865976676679779987865977786756486586544653544344365623144521\n"
"351214235565362646577336454557746895975887896697996767766878996959979558677463654563456353553235351\n"
"122455323664634254446376786844865576755676688896987688886888786957558784675485475744734434541123152\n"
"112255425232642335473748564488859768857777688879799876677866659587557857757676576435634662452134342\n"
"455522444545426534753674548867768687755997866776777898776877795885986544844677753434655623564212345\n"
"412155113623434466447774757776859997987899767989667679699996798679877666567544533665746223252315114\n"
"453332352265242676763377447478765586959766867978979778796767886576986584766747353364676266364245535\n"
"151313336624645447656645455475896896867678697897788997767687866859866655578744537376442664636152223\n"
"455243453435463635337684757445755596698989687799788989986786699797775556586655575653353265554241131\n"
"251415166645666563375376748859997866687967868797978889987998679758798569865756775546344344554312124\n"
"331433134422534365636487656449699586969998668879897987878866676876786989484485864476366325223244142\n"
"132213365423424647776468664875878887697667999777799999878688966768769697755484845766657556635534231\n"
"442522446624224775544665486745678975989677887777989879987899876967997869745484464775476226634414441\n"
"414243454243325747553386586456565559666796897787798878877798976968696887568644467363665645654234342\n"
"215142336343427766345557875578557579699966878799879877798979788987865568455575637643634465625633514\n"
"444521352456524367445584475449688677868789867989777898788779999778897868868864555755544265525241213\n"
"343543163545642554464368767749999765868779787787777877798686666796668788574458637363772366342655525\n"
"341551255466346443643474885467855956677968987898897998798799766789865977556474773777434225343324211\n"
"251123114442354577537368486476558966978789689879787987987678869955568989544465534546734456625112225\n"
"142232534343445746343588765654798855667798978799977888869787696878585778876688643366444565625121131\n"
"311521132563323444745365788677775659598666966787888977889678977759678568746674466335353644435243313\n"
"345412452526465744655568445844688575598969989969889868677699797895799996847586645734753242322441323\n"
"445215142456262354554345445558465597557969867789867867976887979786657576884756676435763335635533122\n"
"444513115342463476355578485576766696688698976689876999966667668996957648447678733463742632553444325\n"
"435555323544423276337437788874665776967796769769676979786987556678595545788564435557456444325233523\n"
"222113511456444244557563476655458686865689666797979989867989658855669574474554336653455456354211121\n"
"315144115556526323767633347588465755769768687968988689996565855887665755648467656776264455322421211\n"
"111332432346444643653743668478845495996777588978799876866697958688946447765557735447666544224153424\n"
"111222244546622353567456366475487446866576799967576859876798989699857548685447663535243336355221325\n"
"223141152542346522576653337565445575768888879786785875899988865987686846876447635576334244515325230\n"
"443322255116456436444377473448654875565887887677885788577796795848468644487447457355523453315211414\n"
"130352124432526245245373467387668847788589695578599869797998978476788754675633774542534423122125242\n"
"334433234534245442367347557564758856564657667677775865656999947474888685776636767445356541551214420\n"
"123124441342636465633633636643567578564865665876975796565965478645468583743436454544523645441113323\n"
"242225422212252456342556737767366667445574888895855965667456845645567874653456675652263612411321330\n"
"110323431333344346242375635633757857778767677445467568468478768776548455535745634226323614531252123\n"
"241142353413552266662225545476534578655856577486484854456447575686474664464757236365246132521542433\n"
"421424323241433233253346776474445566747875748674565775684785456758576776345732334353455412441153141\n"
"010122052414252642656355634756334733656886485474774657557568886554553636454662236335251454214322311\n"
"231112232134413163642365663666654774637684654564855676688477585537434654355636322624345154324544044\n"
"104341445335335525545465224746557546355577764777687567587584763455643366572233664462225221454324214\n"
"202233445441355333555534254446354373543735737858476867667436544435455347623553643353521112454200434\n"
"201321322145223422364346626365663554776746563367656544365357436765366345255436466663141522354332340\n"
"114131034015542352554665526643636655756663737333333655547647533374366345355445546241521354443321244\n"
"304010331133454511122264453343667667753744575554547377645777633436537233566662356531144312112302002\n"
"331022344323342414454432543663463456557657355357556654673444477465425323556623461442221334243421322\n"
"221111410243535512112125336342542555757357463734577556766753754335344364256433325151425553440311021\n"
"303102431041251352533313622645444353263444446445673366655667756625524226323632231111132511122414221\n"
"000231442030315552522221354356554426543653573343647777477652663343536536344454334544555431204210013\n"
"303332131303211152155545523665255343623566653552575333542362645333624335354422123323113100410430232\n"
"012313114410102214155512513453365254625625263323426343526365646353444535342225342142222201204212111\n"
"123112140043004303153112233343562466536223225466423264666465544336564361241322454534403213222132320\n"
"002123324244424104214133514125254522563336645445243436453622555362253154331412543153043133210311001\n"
"111322131223421221241354554411542266265635332643365333232652434365645345323233444421034211131232130\n"
"101202110344332102242331441251235443162522453233265235364246362222155155145313352043204304432021120\n"
"201201023022424401040425555531112132215522664564236643322224622422131412223244514224042220223102112\n"
"123333110113212031214024411121114232312333521434626453641234214533431514242423433431313213223000201\n"
"220130301112144042132412415353433515153111224124321423445525211134534555335010210434111012300120121\n"
"001030102113333002130222433032352335142323423512223143325222125433324311332130022212443221220222322\n"
"000201122000001012423133100004411541433323341344154214212435543542121422002123313144202022122100012\n"
"012111322300213034030131330142125211254543321454454243442412331255315002103332314442011003113122000\n"
"001202021022233123031004403230031341512221513345352553531452554321113401010231031311031210320110120\n"
;

struct TreeMap
{
    int width;
    int height;
    char* data;
};

TreeMap make_tree_map(char* source)
{
    TreeMap result;
    result.width = 0;
    while (source[result.width] != '\n') { result.width++; }
    result.height = 0;
    for (int i = 0; source[i] != '\0'; i++)
    {
        if (source[i] == '\n')
        {
            result.height++;
        }
    }
    result.data = (char*)allocate(result.width * result.height);
    for (int i = 0, data_i = 0; source[i] != '\0'; i++)
    {
        if (source[i] != '\n')
        {
            result.data[data_i] = source[i];
            data_i++;
        }
    }
    return result;
}

char get(int x, int y, TreeMap trees)
{
    return trees.data[x + y * trees.width];
}

bool is_visible(int target_x, int target_y, TreeMap trees)
{
    auto target_height = get(target_x, target_y, trees);
    bool visible;
    // vertical moving up
    visible = true;
    for (int y = target_y - 1; y >= 0; y--)
    {
        if (get(target_x, y, trees) >= target_height)
        {
            visible = false;
            break;
        }
    }
    if (visible) { return true; }
    // vertical moving down
    visible = true;
    for (int y = target_y + 1; y < trees.height; y++)
    {
        if (get(target_x, y, trees) >= target_height)
        {
            visible = false;
            break;
        }
    }
    if (visible) { return true; }
    // horizontal moving left
    visible = true;
    for (int x = target_x - 1; x >= 0; x--)
    {
        if (get(x, target_y, trees) >= target_height)
        {
            visible = false;
            break;
        }
    }
    if (visible) { return true; }
    // horizontal moving right
    visible = true;
    for (int x = target_x + 1; x < trees.width; x++)
    {
        if (get(x, target_y, trees) >= target_height)
        {
            visible = false;
            break;
        }
    }
    if (visible) { return true; }
    return false;
}

int get_scenic_score(int target_x, int target_y, TreeMap trees)
{
    auto target_height = get(target_x, target_y, trees);
    // vertical moving up
    int up_score = 0;
    for (int y = target_y - 1; y >= 0; y--)
    {
        up_score++;
        if (get(target_x, y, trees) >= target_height) { break; }
    }
    // vertical moving down
    int down_score = 0;
    for (int y = target_y + 1; y < trees.height; y++)
    {
        down_score++;
        if (get(target_x, y, trees) >= target_height) { break; }
    }
    // horizontal moving left
    int left_score = 0;
    for (int x = target_x - 1; x >= 0; x--)
    {
        left_score++;
        if (get(x, target_y, trees) >= target_height) { break; }
    }
    // horizontal moving right
    int right_score = 0;
    for (int x = target_x + 1; x < trees.width; x++)
    {
        right_score++;
        if (get(x, target_y, trees) >= target_height) { break; }
    }
    return up_score * down_score * left_score * right_score;
}

int main()
{
    initialize_printing();

    auto trees = make_tree_map(SOURCE);

    int visible_count = 0;
    for (int x = 0; x < trees.width; x++)
    {
        for (int y = 0; y < trees.height; y++)
        {
            if (is_visible(x, y, trees))
            {
                visible_count++;
            }
        }
    }
    print("Answer to part 1: "); print(visible_count); print("\n");

    int max_scenic_score = 0;
    for (int x = 0; x < trees.width; x++)
    {
        for (int y = 0; y < trees.height; y++)
        {
            auto current_scenic_score = get_scenic_score(x, y, trees);
            if (current_scenic_score > max_scenic_score)
            {
                max_scenic_score = current_scenic_score;
            }
        }
    }
    print("Answer to part 2: "); print(max_scenic_score); print("\n");
}
